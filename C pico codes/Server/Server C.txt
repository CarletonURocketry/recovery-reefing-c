Server C

#include <stdlib.h>
#include <stdio.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h> //for inet_addr()

#include "pico/stdlib.h" //pico gpio functions

//set the LEDS and PINS
#define PICO_PIN 25
#define LED1_PIN 11
#define LED2_PIN 12
#define LED3_PIN 13
#define CHARGE_PIN 28

void set_leds(bool led1, bool led2, bool led3) { //turns led off and on. 
    gpio_put(LED1_PIN, led1);
    gpio_put(LED2_PIN, led2);
    gpio_put(LED3_PIN, led3);
}


int main(){

	gpio_init(CHARGE_PIN);
	gpio_set_dir(CHARGE_PIN, GPIO_IN);

	gpio_init(LED1_PIN);
	gpio_init(LED2_PIN);
	gpio_init(LED3_PIN);
	gpio_set_dir(LED1_PIN, GPIO_OUT);
	gpio_set_dir(LED2_PIN, GPIO_OUT);
	gpio_set_dir(LED3_PIN, GPIO_OUT);
	
	gpio_init(PICO_PIN);
	gpio_set_dir(PICO_PIN, GPIO_OUT);
	
	set_leds(0,0,0);	
	
	char server_message[256] = "Hello this is server grandson";
	
	//create a socket
	int serverSocket;
	serverSocket = socket(AF_INET, SOCK_STREAM, 0);
	
	//define socket address
	struct sockaddr_in server_address;
	server_address.sin_family = AF_INET;
	server_address.sin_port = htons(80);
	server_address.sin_addr.s_addr = inet_addr("192.168.4.1");
	
	//bind the socket to IP and port
	bind(serverSocket, (struct sockaddr*) &server_address, sizeof(server_address));

	listen(serverSocket, 5);
	
	int client_socket;
	client_socket = accept(serverSocket, NULL, NULL);
	While (1){
	if (client_socket > 0){
	set_leds(1, 0, 0);
    	sleep_ms(1000);
    	set_leds(1, 1, 0);
    	sleep_ms(1000);
    	set_leds(1, 1, 1);
    	sleep_ms(2000);
    	set_leds(0, 0, 0);
	break;
	
	}else{
	set_leds(0,1,0);
	}}
	
	if (gpio_get(28) == 0){
	snprintf(server_message, sizeof(server_message), "True");

	}else{
	snprintf(server_message, sizeof(server_message), "False");

	}

	//send the message
	send(client_socket, server_message, sizeof(server_message), 0);
	
	//close socket
	close(serverSocket);
		
	return 0;
}